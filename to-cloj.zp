(load "compiler/ast")

(import-all "ast")

(define (treat-unquote val)
  (++ "~"
    (if (eq? (get-from val [:function :value]) 'unquote-splicing) "@" "")
    (->string (treat-val (get-from val [:arguments 0])))))

(define (treat-qq args)
  "dirty fix for AST imperfections"
  (let ((args (car args)))
    (define (treat-val-or-unquote val)
      (if (and (eq? (val :type) :application)
               (in? [unquote unquote-splicing]
                    (get-from val [:function :value])))
        (treat-unquote val)
        (treat-val val)))

    (++ "`(" (->string (treat-val-or-unquote (args :function))) " "
        (string:join (map ($ (->string (treat-val-or-unquote %))) (args :arguments)) " ")
        ")")))

(define (treat-val val)
  (case (val :type)
    ((:string)
      (++ "\"" (->string (val :value)) "\""))
    ((:application)
      (if (eq? (get-from val [:function :value]) 'quasiquote)
        (treat-qq (val :arguments))
        `(,(get-from val [:function :value]) ,@(map treat-val (val :arguments)))))
    (else (val :value))))

(define (treat-body body)
  (cons (->string (map ($ (% :value)) (body :arguments)))
        (list (treat-val (body :body)))))

(define (write-fn exports fn)
  (let ((name (get-from fn [:function :value]))
        (body (get-from fn [:arguments 0])))
  (write
    (cons
      (if (in? exports (get-from fn [:function :value])) 'defn 'defn-)
      (cons
        name
        (treat-body body))))))

(define (extract-name qq)
  (get-from qq [:arguments 0 :arguments 0 :arguments 0 :value]))

(define (transform modl)
  (let ((name (get-from modl [:arguments 0 :value]))
        (exports (map extract-name
                      (get-from modl [:arguments 1 :arguments]))))
    (write `(ns ,(string->symbol name)))
    (map (curry write-fn exports) (drop 2 (get-from modl :arguments)))))

(|> (car zepto:args)
    parse
    ast:ast
    ($ (get-from % :function))
    transform)
